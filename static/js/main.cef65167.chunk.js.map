{"version":3,"sources":["components/dataTable/constants.js","components/dataTable/DataTableHeaderRow.js","components/dataTable/DataTableBodyRow.js","components/dataTable/DataTable.js","columnDefinition.js","App.js","serviceWorker.js","index.js"],"names":["valueTypes","columnClasses","thumbnailUrl","id","albumId","title","url","DataTableHeaderRow","props","className","type","value","onChange","e","handleSelectAllChange","onSelectAllChange","columns","map","column","textAlign","key","label","TableRowCellWithText","row","wordWrap","TableRowCellWithImg","src","alt","TableRowCellWithHtmlElement","dangerouslySetInnerHTML","__html","DataTableBodyRow","index","style","data","rows","onRowClick","rowsState","handleRowCheckboxChange","isItemLoaded","Loader","onClick","rowData","rowIndex","target","getAttribute","includes","onClickTableBodyRow","rowId","onRowCheckboxChange","checked","isChecked","RenderElement","valueType","DataTable","useState","setRowsState","searchText","setSearchText","searchType","setSearchType","infiniteLoaderRef","useRef","hasMountedRef","hasNextPage","isNextPageLoading","loadNextPage","newRowsState","Object","assign","useEffect","formatedRowState","forEach","formatRowsState","selectedRows","keys","push","length","getSelctedRows","onSelectionChange","current","resetloadMoreItemsCache","tableHeight","window","innerHeight","itemCount","loadMoreItems","onLoadMoreItems","args","onSubmit","preventDefault","placeholder","ref","onItemsRendered","itemData","height","itemSize","columnDefinition","width","PHOTOS_URL","App","setRows","setHasNextPage","setIsNextPageLoading","fetchData","a","limit","page","argQuery","query","fetch","result","json","console","log","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cef65167.chunk.js","sourcesContent":["const valueTypes = {\n  string: 1,\n  number: 2,\n  image: 3,\n  htmlElement: 4\n}\n\nconst columnClasses = {\n  thumbnailUrl: 'thumbnail-cell',\n  id: 'id-cell',\n  albumId: 'album-id-cell',\n  title: 'title-cell',\n  url: 'url-cell'\n}\n\nexport { valueTypes, columnClasses };","import React from 'react';\nimport { columnClasses } from './constants';\n\nconst onSelectAllChange = (e, handleSelectAllChange) => {\n  handleSelectAllChange(e)\n}\n\nconst DataTableHeaderRow = function(props) {\n  return (\n    <div className=\"Rtable-row Rtable-row--head\">\n      <div className=\"Rtable-cell select-item-cell column-heading\">\n        <input type=\"checkbox\"\n          value=\"All\"\n          onChange={(e) => onSelectAllChange(e, props.handleSelectAllChange)}\n        />\n      </div> \n      {props.columns.map((column) => (\n        <div \n        className={\n          'Rtable-cell column-heading' +\n          (column.textAlign ? ` text-align-${column.textAlign}` : '') +\n          ` ${columnClasses[column.id]}`\n        }\n        // Todo: need to fix\n        //style={{width: column.width? column.width: 'auto' }}\n        key={column.id}\n        >\n          {column.label}\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default DataTableHeaderRow;","import React from 'react';\nimport { valueTypes, columnClasses } from './constants';\n\nconst TableRowCellWithText = function(props) {\n  const { column, row } = props;\n  return (\n    <div \n      className={\n        'Rtable-cell' + \n        (column.textAlign ? ` text-align-${column.textAlign}` : '') +\n        (column.wordWrap ? ' word-wrap': '') +\n        ` ${columnClasses[column.id]}`\n      }\n    >\n        {row[column.id]}\n    </div>\n  )\n}\n\nconst TableRowCellWithImg = function(props) {\n  const { column, row } = props;\n  return (\n    <div \n      className={\n        'Rtable-cell' + \n        (column.textAlign ? ` text-align-${column.textAlign}` : '') +\n        (column.wordWrap ? ' word-wrap': '') +\n        ` ${columnClasses[column.id]}`\n      }\n    >\n      <img className=\"table-cell-thumbnail-image\" src={row[column.id]} alt={row[column.id]} />\n    </div>\n  )\n}\n\nconst TableRowCellWithHtmlElement = function(props) {\n  const { column, row } = props;\n  return (\n    <div \n      className={\n        'Rtable-cell' + \n        (column.textAlign ? ` text-align-${column.textAlign}` : '') +\n        (column.wordWrap ? ' word-wrap': '') +\n        ` ${columnClasses[column.id]}`\n      }\n      dangerouslySetInnerHTML={{__html: row[column.id]}}\n    >\n    </div>\n  )\n}\n\nconst onClickTableBodyRow = function(e, rowData, rowIndex, onRowClick) {\n  const isClickedOnRowCheckbox = e.target.getAttribute('class').includes('js-row-checkbox');\n  if(!isClickedOnRowCheckbox) {\n    onRowClick(rowData, rowIndex);\n  }\n}\n\nconst onRowCheckboxChange = (e, rowId, handleRowCheckboxChange) => {\n  handleRowCheckboxChange(e, rowId);\n}\n\nconst DataTableBodyRow = function(props) {\n  const { \n    index,\n    style\n   } = props;\n\n   const {\n    rows,\n    onRowClick,\n    columns,\n    rowsState,\n    handleRowCheckboxChange,\n    isItemLoaded\n   } = props.data;\n\n  const row = rows[index] || {};\n\n  const Loader = (props) => {\n    return (\n      <div style={props.style}>\n        <div className=\"loader flex-row flex-center\">\n          <div>\n            Loading...\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    !isItemLoaded(index) ? <Loader style={style} /> :\n    <div \n      key={row.id} \n      onClick={(e) => onClickTableBodyRow(e, row, index, onRowClick)}\n      style={style}\n    >\n      <div className={'Rtable-row' + (index % 2 !== 0 ? ' is-striped' : '') }>\n      <div className=\"Rtable-cell select-item-cell\">\n        <input \n          type=\"checkbox\" \n          onChange={(e) => onRowCheckboxChange(e, row.id, handleRowCheckboxChange)}\n          value={row.id}\n          checked={rowsState[row.id] && rowsState[row.id].isChecked}\n          className=\"js-row-checkbox\"\n        />\n      </div>\n      {columns.map((column) => {\n        let RenderElement;\n        switch (column.valueType) {\n          case valueTypes.htmlElement: {\n            RenderElement = <TableRowCellWithHtmlElement column={column} row={row} key={column.id} />\n            break;\n          }\n\n          case valueTypes.image: {\n            RenderElement = <TableRowCellWithImg column={column} row={row} key={column.id} />\n            break;\n          }\n        \n          default:\n            RenderElement = <TableRowCellWithText column={column} row={row} key={column.id} />\n            break;\n        }\n        return RenderElement\n      }\n      )}\n    </div>\n  </div>\n  )\n}\n\nexport default DataTableBodyRow;","import React, {useState, useEffect, useRef} from 'react';\nimport { FixedSizeList as List } from 'react-window';\nimport InfiniteLoader from \"react-window-infinite-loader\";\n\nimport './data-table.css';\n\nimport DataTableHeaderRow from './DataTableHeaderRow';\nimport DataTableBodyRow from './DataTableBodyRow';\n\nconst formatRowsState = function(rowsState, rows = []) {\n  const formatedRowState = {};\n\n  rows.forEach(row => {\n    const rowId = row.id;\n    if(!rowsState[rowId]) {\n      const newProps = { isChecked: false }\n      formatedRowState[rowId] = Object.assign({}, row, newProps);\n    } else {\n      formatedRowState[rowId] = rowsState[rowId];\n    }\n  });\n  \n  return formatedRowState;\n}\n\nfunction DataTable(props) {\n  const [ rowsState,  setRowsState ] = useState({});\n  const [ searchText, setSearchText ] = useState('');\n  const [ searchType, setSearchType ] = useState('');\n\n  const infiniteLoaderRef = useRef(null);\n  const hasMountedRef = useRef(false);\n\n  const {\n    rows,\n    columns,\n    onRowClick,\n    hasNextPage,\n    isNextPageLoading,\n    loadNextPage\n  } = props;\n\n  const handleSelectAllChange = (e) => {\n    const isChecked = e.target.checked;\n    const newRowsState = {};\n    Object.keys(rowsState).forEach(id => {\n      const row = rowsState[id];\n      row.isChecked = isChecked;\n      newRowsState[id] = row;\n    }); \n\n    setRowsState(newRowsState);\n  }\n\n  const handleRowCheckboxChange = (e, id) => {\n    const isChecked = e.target.checked;\n    const newRowsState = Object.assign({}, rowsState);\n\n    newRowsState[id].isChecked = isChecked;\n\n    setRowsState(newRowsState);\n  }\n\n  const getSelctedRows = (rows) => {\n    const selectedRows = [];\n    const all = 'All';\n\n    Object.keys(rows).forEach(id => {\n      const row = rows[id];\n\n      if(row.isChecked) {\n        selectedRows.push(id)\n      }\n    });\n\n    // To check select all is checked\n    if(Object.keys(rows).length === selectedRows.length) {\n      return all;\n    }\n\n    return selectedRows;\n  }\n\n  useEffect(() => {\n    setRowsState(formatRowsState(rowsState, props.rows));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.rows]);\n\n  useEffect(() => {\n    const selectedRows = getSelctedRows(rowsState);\n    props.onSelectionChange(selectedRows);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [rowsState]);\n\n\n  // Each time searchText or searchType changed we called the method resetloadMoreItemsCache to clear the cache\n  useEffect(() => {\n    // We only need to reset cached items when \"searchText\" changes.\n    // This effect will run on mount too; there's no need to reset in that case.\n    if (hasMountedRef.current) {\n      if (infiniteLoaderRef.current) {\n        infiniteLoaderRef.current.resetloadMoreItemsCache();\n      }\n    }\n    hasMountedRef.current = true;\n  }, [searchText, searchType]);\n\n  const outterPadding = 40;\n  const searchBoxheight = 56;\n  const tableHeaderHeight = 50;\n\n  const tableHeight = (window.innerHeight - (outterPadding + searchBoxheight + tableHeaderHeight));\n\n  // Infinity Loader\n\n  // If there are more items to be loaded then add an extra row to hold a loading indicator.\n  const itemCount = hasNextPage ? rows.length + 1 : rows.length;\n\n  // Only load 1 page of items at a time.\n  // Pass an empty callback to InfiniteLoader in case it asks us to load more than once.\n  const loadMoreItems = isNextPageLoading ? () => {} : loadNextPage;\n\n  // Every row is loaded except for our loading indicator row.\n  const isItemLoaded = index => !hasNextPage || index < rows.length;\n\n  const onLoadMoreItems = (args) => {\n    const query = {\n      searchText,\n      searchType\n    }\n    \n    loadMoreItems(args, query);\n  }\n\n  const onChangeSearchType = (e) => {\n    setSearchType(e.target.value);\n  }\n\n  const onSearchTextChange = (e) => {\n    setSearchText(e.target.value);\n  }\n\n  const onSearchSubmit = (e) => {\n    e.preventDefault();\n\n    const query = {\n      searchText\n    }\n\n    loadMoreItems([], query);\n  }\n\n  return(\n    <div className=\"data-table\">\n      <form className=\"search-filter-container flex-row\" onSubmit={onSearchSubmit}>\n        <div>\n          <select \n            className=\"search-filter-type\" \n            value={searchType}\n            onChange={onChangeSearchType}\n          >\n            <option value=\"\">Filter</option>\n            {columns.map((column) => {\n              if(column.id !== 'thumbnailUrl') {\n                return <option value={column.id} key={column.id}>{column.label}</option>\n              }\n              return '';\n            })}\n          </select>\n        </div>\n        <div className=\"flex-item\">\n          <input \n            className=\"search-filter-input\" \n            type=\"text\" \n            placeholder=\"Search photos\"\n            onChange={onSearchTextChange}\n          />\n        </div>\n      </form>\n      <div className=\"Rtable\">\n        <DataTableHeaderRow\n          columns={props.columns}\n          handleSelectAllChange={handleSelectAllChange}\n        />\n        <InfiniteLoader\n          ref={infiniteLoaderRef}\n          isItemLoaded={isItemLoaded}\n          itemCount={itemCount}\n          loadMoreItems={(args) => onLoadMoreItems(args)}\n        >\n          {({ onItemsRendered, ref }) => (\n          <List\n            itemData={{\n              rows,\n              columns,  \n              onRowClick,\n              rowsState,\n              handleRowCheckboxChange,\n              isItemLoaded\n            }}\n            className=\"List\"\n            height={tableHeight}\n            itemCount={itemCount}\n            itemSize={80}\n            onItemsRendered={onItemsRendered}\n            ref={ref}\n          >\n          {DataTableBodyRow}\n          </List>\n          )}\n        </InfiniteLoader>\n      </div>\n    </div>\n  )\n};\n\nexport default DataTable;","const columnDefinition = [\n  {\n    id: 'thumbnailUrl',\n    label: 'Thumbnail',\n    valueType: 3,\n    wordWrap: true\n  },\n  {\n    id: 'id',\n    label: 'ID',\n    valueType: 2,\n    textAlign: 'right'\n  },\n  {\n    id: 'albumId',\n    label: 'Album Id',\n    valueType: 2,\n    textAlign: 'right'\n  },\n  {\n    id: 'title',\n    label: 'Title',\n    valueType: 4,\n    width: '370px'\n  },\n  {\n    id: 'url',\n    label: 'URL',\n    valueType: 1,\n    wordWrap: true\n  }\n]\n\nexport default columnDefinition","import React, {useEffect, useState} from 'react';\nimport DataTable from './components/dataTable/DataTable';\nimport './App.css';\n\nimport columnDefinition from './columnDefinition';\n\nconst PHOTOS_URL = 'https://jsonplaceholder.typicode.com/photos';\nconst TOTAL_ROWS = 5000;\n\nfunction App() {\n  const [rows, setRows] = useState([]);\n\n  const [hasNextPage, setHasNextPage] = useState([]);\n  const [isNextPageLoading, setIsNextPageLoading] = useState([]);\n  \n  async function fetchData(...args) {\n    const limit = 10;\n    const page = args.length === 0 ? 1 : ((args[0] + limit) / 10);\n    const argQuery = args[1];\n    const searchText = argQuery && argQuery.searchText;\n    const searchType = argQuery && argQuery.searchType;\n\n    let query = `?_page=${page}&_limit=${limit}`;\n\n    setHasNextPage(rows.length < TOTAL_ROWS);\n\n    if(searchType && searchText) {\n      query +=`&${searchType}=${searchText}`\n    } else if(searchText) {\n      query += `&q=${searchText}`;\n    }\n\n    const result = await fetch((PHOTOS_URL + query));\n    const json = await result.json();\n\n    if(json.length < limit) {\n      setHasNextPage(false);\n    }\n\n    setIsNextPageLoading(false);\n\n    // If: It's a first page while init or on searchFiter then replase rows with current result\n    if(page === 1) {\n      setRows(json);  \n    } else {\n      setRows([...rows, ...json]);\n    }\n  }\n  \n  const _loadNextPage = (...args) => {\n    fetchData(...args);\n  };\n\n  useEffect(() => {\n    fetchData();\n    // eslint-disable-next-line\n  }, []);\n  return (\n    <div className=\"wrapper App\">\n      <DataTable\n        columns={columnDefinition}\n        rows={rows}\n        onRowClick={(rowData, rowIndex) => {\n          console.log('rowData', rowData);\n          console.log('rowIndex', rowIndex);\n        }}\n        onSelectionChange={(selectedRows) => {\n          console.log('selectedRows', selectedRows);\n        }}\n        hasNextPage={hasNextPage}\n        isNextPageLoading={isNextPageLoading}\n        loadNextPage={_loadNextPage}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}